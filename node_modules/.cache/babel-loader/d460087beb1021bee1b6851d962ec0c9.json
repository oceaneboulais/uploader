{"ast":null,"code":"import _slicedToArray from\"/Users/oboulais/Desktop/uploader/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import*as XLSX from'xlsx';import DataTable from'react-data-table-component';function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),columns=_useState2[0],setColumns=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),data=_useState4[0],setData=_useState4[1];// process CSV file data\nvar processData=function processData(dataString){var dataStringLines=dataString.split(/\\r\\n|\\n/);var headers=dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);var list=[];for(var i=1;i<dataStringLines.length;i++){var row=dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);if(headers&&row.length==headers.length){var obj={};for(var j=0;j<headers.length;j++){var d=row[j];if(d.length>0){if(d[0]=='\"')d=d.substring(1,d.length-1);if(d[d.length-1]=='\"')d=d.substring(d.length-2,1);}if(headers[j]){obj[headers[j]]=d;}}// remove the blank rows\nif(Object.values(obj).filter(function(x){return x;}).length>0){list.push(obj);}}}// prepare columns list from headers\nvar columns=headers.map(function(c){return{name:c,selector:c};});setData(list);setColumns(columns);};// handle file upload\nvar handleFileUpload=function handleFileUpload(e){var file=e.target.files[0];var reader=new FileReader();reader.onload=function(evt){/* Parse data */var bstr=evt.target.result;var wb=XLSX.read(bstr,{type:'binary'});/* Get first worksheet */var wsname=wb.SheetNames[0];var ws=wb.Sheets[wsname];/* Convert array of arrays */var data=XLSX.utils.sheet_to_csv(ws,{header:1});processData(data);};reader.readAsBinaryString(file);};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h3\",null,\"Upload and View a CSV File\"),/*#__PURE__*/React.createElement(\"input\",{type:\"file\",accept:\".csv,.xlsx,.xls\",onChange:handleFileUpload}),/*#__PURE__*/React.createElement(DataTable,{pagination:true,highlightOnHover:true,columns:columns,data:data}));}export default App;","map":{"version":3,"sources":["/Users/oboulais/Desktop/uploader/src/App.js"],"names":["React","useState","XLSX","DataTable","App","columns","setColumns","data","setData","processData","dataString","dataStringLines","split","headers","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","map","c","name","selector","handleFileUpload","e","file","target","files","reader","FileReader","onload","evt","bstr","result","wb","read","type","wsname","SheetNames","ws","Sheets","utils","sheet_to_csv","header","readAsBinaryString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport DataTable from 'react-data-table-component';\n\nfunction App() {\n\n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n\n  // process CSV file data\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n    \n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      if (headers && row.length == headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] == '\"')\n              d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] == '\"')\n              d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n\n        // remove the blank rows\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n    \n    // prepare columns list from headers\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c,\n    }));\n\n    setData(list);\n    setColumns(columns);\n  }\n\n  // handle file upload\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: 'binary' });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n  }\n\n  return (\n    <div>\n      <h3>Upload and View a CSV File</h3>\n      <input\n        type=\"file\"\n        accept=\".csv,.xlsx,.xls\"\n        onChange={handleFileUpload}\n      />\n      <DataTable\n        pagination\n        highlightOnHover\n        columns={columns}\n        data={data}\n      />\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}