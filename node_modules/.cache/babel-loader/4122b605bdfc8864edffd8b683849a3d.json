{"ast":null,"code":"'use strict';\n\nvar GitHubApi = require('github-api');\n/**\n * Instantiate a new GitHub object.\n *\n * @param {Object} config An object containing the username, password, type of auth, and the repository to use.\n *\n * @constructor\n */\n\n\nfunction GitHub(config) {\n  var gitHubApi = new GitHubApi({\n    username: config.username,\n    password: config.password,\n    auth: config.auth\n  });\n  this.repository = gitHubApi.getRepo(config.username, config.repository);\n}\n/**\n * Update a file of the repository (or create a new if it didn't exist). The method returns a Promise that,\n * when resolved returns the repository object. This is the same as the <code>repository</code> property of the\n * <code>data</code> parameter.\n *\n * @param {Object} data An object containing the data to update (or create) the new file. The object must contain\n * the following properties:\n * - {string} <code>branchName</code>: The name of the branch in which the file should be updated (or create)\n * - {string} <code>commitTitle</code>: The commit message for the change\n * - {string} <code>content</code>: The content of the file\n * - {string} <code>filename</code>: The path of the file to update (or create)\n * - {Object} <code>repository</code>: The object representing the repository to update\n *\n * @returns {Promise}\n */\n\n\nGitHub.prototype.saveFile = function (data) {\n  return new Promise(function (resolve, reject) {\n    data.repository.write(data.branchName, data.filename, data.content, data.commitTitle, function (err) {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(data.repository);\n      }\n    });\n  });\n};\n\nmodule.exports = GitHub;","map":{"version":3,"sources":["/Users/oboulais/Desktop/uploader/src/github.js"],"names":["GitHubApi","require","GitHub","config","gitHubApi","username","password","auth","repository","getRepo","prototype","saveFile","data","Promise","resolve","reject","write","branchName","filename","content","commitTitle","err","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;AAEA;;;;;;;;;AAOA,SAASC,MAAT,CAAgBC,MAAhB,EAAwB;AACrB,MAAIC,SAAS,GAAG,IAAIJ,SAAJ,CAAc;AAC3BK,IAAAA,QAAQ,EAAEF,MAAM,CAACE,QADU;AAE3BC,IAAAA,QAAQ,EAAEH,MAAM,CAACG,QAFU;AAG3BC,IAAAA,IAAI,EAAEJ,MAAM,CAACI;AAHc,GAAd,CAAhB;AAMA,OAAKC,UAAL,GAAkBJ,SAAS,CAACK,OAAV,CAAkBN,MAAM,CAACE,QAAzB,EAAmCF,MAAM,CAACK,UAA1C,CAAlB;AACF;AAED;;;;;;;;;;;;;;;;;AAeAN,MAAM,CAACQ,SAAP,CAAiBC,QAAjB,GAA4B,UAASC,IAAT,EAAe;AACxC,SAAO,IAAIC,OAAJ,CAAY,UAASC,OAAT,EAAkBC,MAAlB,EAA0B;AAC1CH,IAAAA,IAAI,CAACJ,UAAL,CAAgBQ,KAAhB,CACGJ,IAAI,CAACK,UADR,EAEGL,IAAI,CAACM,QAFR,EAGGN,IAAI,CAACO,OAHR,EAIGP,IAAI,CAACQ,WAJR,EAKG,UAASC,GAAT,EAAc;AACX,UAAIA,GAAJ,EAAS;AACNN,QAAAA,MAAM,CAACM,GAAD,CAAN;AACF,OAFD,MAEO;AACJP,QAAAA,OAAO,CAACF,IAAI,CAACJ,UAAN,CAAP;AACF;AACH,KAXJ;AAaF,GAdM,CAAP;AAeF,CAhBD;;AAkBAc,MAAM,CAACC,OAAP,GAAiBrB,MAAjB","sourcesContent":["'use strict';\n\nvar GitHubApi = require('github-api');\n\n/**\n * Instantiate a new GitHub object.\n *\n * @param {Object} config An object containing the username, password, type of auth, and the repository to use.\n *\n * @constructor\n */\nfunction GitHub(config) {\n   var gitHubApi = new GitHubApi({\n      username: config.username,\n      password: config.password,\n      auth: config.auth\n   });\n\n   this.repository = gitHubApi.getRepo(config.username, config.repository);\n}\n\n/**\n * Update a file of the repository (or create a new if it didn't exist). The method returns a Promise that,\n * when resolved returns the repository object. This is the same as the <code>repository</code> property of the\n * <code>data</code> parameter.\n *\n * @param {Object} data An object containing the data to update (or create) the new file. The object must contain\n * the following properties:\n * - {string} <code>branchName</code>: The name of the branch in which the file should be updated (or create)\n * - {string} <code>commitTitle</code>: The commit message for the change\n * - {string} <code>content</code>: The content of the file\n * - {string} <code>filename</code>: The path of the file to update (or create)\n * - {Object} <code>repository</code>: The object representing the repository to update\n *\n * @returns {Promise}\n */\nGitHub.prototype.saveFile = function(data) {\n   return new Promise(function(resolve, reject) {\n      data.repository.write(\n         data.branchName,\n         data.filename,\n         data.content,\n         data.commitTitle,\n         function(err) {\n            if (err) {\n               reject(err);\n            } else {\n               resolve(data.repository);\n            }\n         }\n      );\n   });\n};\n\nmodule.exports = GitHub;"]},"metadata":{},"sourceType":"module"}